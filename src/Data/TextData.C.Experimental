// TextData.C

#include "TextData.H"
#include <QDebug>

TextD0::TextD0() {
}

TextData::TextData(Data *parent):
  Data(parent), TextD0() {
  setType("text");
}

TextD0::~TextD0() {
}

TextData::~TextData() {
}

QString TextD0::text() const {
  return text_;
}

QList<MarkupData *> const &TextD0::markups() const {
  return markups_;
}

void TextD0::setText(QString const &t) {
  text_ = t;
  Data *dp = dynamic_cast<Data*>(this);
  if (dp)
    dp->markModified();
  else
    qDebug() << "TextD0: Not Data";
}

MarkupData *TextD0::addMarkup(int start, int end,
				     MarkupData::Style style) {
  MarkupData *md = new MarkupData(0);
  /* Initial parent-less construction avoids propagating markModified
     before initialization is complete. */
  md->setStart(start);
  md->setEnd(end);
  md->setStyle(style);
  markups_.append(md);
  Data *dp = dynamic_cast<Data*>(this);
  if (dp) {
    md->setParent(dp);
    dp->markModified(Data::InternalMod);
  } else {
    qDebug() << "TextD0: Not Data";
  }
  return md;
}

void TextD0::removeMarkup(MarkupData *md) {
  if (markups_.removeOne(md)) {
    delete md;
  Data *dp = dynamic_cast<Data*>(this);
  if (dp)
    dp->markModified(Data::InternalMod);
  else
    qDebug() << "TextD0: Not Data";
  }
}

void TextD0::loadMore(QVariantMap const &src) {
  foreach (MarkupData *md, markups_)
    delete md;
  markups_.clear();
  
  QVariantList ml = src["markups"].toList();
  foreach (QVariant m, ml) {
    Data *dp = dynamic_cast<Data*>(this);
    MarkupData *md = new MarkupData(dp);
    md->load(m.toMap());
    markups_.append(md);
  }
}

void TextD0::saveMore(QVariantMap &dst) const {
  QVariantList ml;
  foreach (MarkupData *md, markups_) {
    QVariantMap m = md->save();
    ml.append(m);
  }
  dst["markups"] = ml;
}

void TextData::loadMore(QVariantMap const &src) {
  TextD0::loadMore(src);
}

void TextData::saveMore(QVariantMap &dst) const {
  TextD0::saveMore(dst);
}

